{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","name","email","className","href","TodoInfo","todo","title","completed","user","classNames","id","TodoList","todos","map","username","userId","usersFromServer","find","App","useState","setTitle","setUser","listTodo","setListTodo","errorTitle","setErrorTitle","errorUser","setErrorUser","onSubmit","event","preventDefault","someTodolist","newTodo","Math","max","someTodo","item","prev","newTodoAdd","action","method","type","placeholder","value","onChange","target","disabled","someUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44429b86.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  name: string;\n  email: string;\n};\n\nexport const UserInfo:React.FC<Props> = ({ name, email }) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo:React.FC<Props> = ({ todo }) => {\n  const { title, completed, user } = todo;\n\n  return (\n\n    <li\n      className={classNames('TodoInfo',\n        { 'TodoInfo--completed': completed })}\n      key={todo.id}\n      data-id={todo.id}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      { user\n      && <UserInfo name={user.name} email={user.email} />}\n\n    </li>\n  );\n};\n","import React from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos = [] }) => (\n  <ul className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </ul>\n\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [user, setUser] = useState(0);\n  const [listTodo, setListTodo] = useState(todos);\n\n  const [errorTitle, setErrorTitle] = useState(false);\n  const [errorUser, setErrorUser] = useState(false);\n\n  const newTodoAdd = () => {\n    if (!title) {\n      setErrorTitle(true);\n    }\n\n    if (!user) {\n      setErrorUser(true);\n    }\n\n    if (!title || !user) {\n      return;\n    }\n\n    function maxId(someTodolist: Todo[]) {\n      return Math.max(...someTodolist.map(someTodo => someTodo.id));\n    }\n\n    const newTodo = {\n      id: maxId(listTodo) + 1,\n      title,\n      completed: false,\n      userId: user,\n      user: usersFromServer.find(item => item.id === user) || null,\n    };\n\n    setListTodo((prev) => [...prev, newTodo]);\n    setTitle('');\n    setUser(0);\n  };\n\n  const onFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    newTodoAdd();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        onSubmit={onFormSubmit}\n        action=\"/api/users\"\n        method=\"POST\"\n      >\n        <div className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => {\n              setTitle(event.target.value);\n              setErrorTitle(false);\n            }}\n          />\n\n          {errorTitle && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n\n        </div>\n\n        <div className=\"field\">\n          {'User: '}\n          <select\n            data-cy=\"userSelect\"\n            value={user}\n            onChange={(event) => {\n              setUser(+event.target.value);\n              setErrorUser(false);\n            }}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n            {usersFromServer.map(someUser => (\n              <option\n                value={someUser.id}\n                key={someUser.id}\n              >\n                {someUser.name}\n              </option>\n            ))}\n          </select>\n\n          {errorUser && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={listTodo} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}